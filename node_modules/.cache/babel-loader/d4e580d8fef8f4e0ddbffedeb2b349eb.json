{"ast":null,"code":"var _jsxFileName = \"/Users/kevinsmith/Source/map/src/App.js\";\nimport React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport Select from 'react-select';\nimport \"./App.css\";\nimport useSwr from \"swr\";\n\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\n\nconst ratings = [{\n  label: \"1<\",\n  value: 1\n}, {\n  label: \"2<\",\n  value: 2\n}, {\n  label: \"3<\",\n  value: 3\n}, {\n  label: \"4<\",\n  value: 4\n}, {\n  label: \"5<\",\n  value: 5\n}];\nexport const icon = new Icon({\n  iconUrl: \"/mountain.svg\",\n  iconSize: [25, 25]\n});\n\nconst App = () => {\n  const [activeClimb, setActiveClimb] = React.useState(null);\n  const [activeRating, setActiveRating] = React.useState(null);\n  const url = 'https://www.mountainproject.com/data/get-routes-for-lat-lon?lat=40.65&lon=-111.91&maxDistance=10&minDiff=5.6&maxDiff=5.10&key=200703063-2c86cd159070d7b2b2f9abc830c4f44b';\n  const {\n    data,\n    error\n  } = useSwr(url, {\n    fetcher\n  }); //const { selectedOption } = activeRating;\n\n  const climbs = data && !error ? data.routes : [];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(Map, {\n    center: [40.65, -111.91],\n    zoom: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"filterMountains\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"select\", {\n    id: \"lang\",\n    onChange: this.change,\n    value: this.state.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Select\"), React.createElement(\"option\", {\n    value: \"Java\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Java\"), React.createElement(\"option\", {\n    value: \"C++\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"C++\"))), React.createElement(TileLayer, {\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), climbs.map(climb => React.createElement(Marker, {\n    key: climb.id,\n    position: [climb.latitude, climb.longitude],\n    onClick: () => {\n      setActiveClimb(climb);\n    },\n    icon: icon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })), activeClimb && React.createElement(Popup, {\n    position: [activeClimb.latitude, activeClimb.longitude],\n    onClose: () => {\n      setActiveClimb(null);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, activeClimb.name), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, activeClimb.rating)))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/kevinsmith/Source/map/src/App.js"],"names":["React","Map","Marker","Popup","TileLayer","Icon","Select","useSwr","fetcher","args","fetch","then","response","json","ratings","label","value","icon","iconUrl","iconSize","App","activeClimb","setActiveClimb","useState","activeRating","setActiveRating","url","data","error","climbs","routes","change","state","map","climb","id","latitude","longitude","name","rating"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport Select from 'react-select'\nimport \"./App.css\";\nimport useSwr from \"swr\";\n\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\nconst ratings = [\n  { label: \"1<\", value: 1 },\n  { label: \"2<\", value: 2 },\n  { label: \"3<\", value: 3 },\n  { label: \"4<\", value: 4 },\n  { label: \"5<\", value: 5 },\n];\nexport const icon = new Icon({\n  iconUrl: \"/mountain.svg\",\n  iconSize: [25, 25]\n});\n\nconst App = () => {\n  const [activeClimb, setActiveClimb] = React.useState(null);\n  const [activeRating, setActiveRating] = React.useState(null);\n  const url = 'https://www.mountainproject.com/data/get-routes-for-lat-lon?lat=40.65&lon=-111.91&maxDistance=10&minDiff=5.6&maxDiff=5.10&key=200703063-2c86cd159070d7b2b2f9abc830c4f44b';\n  const { data, error } = useSwr(url, { fetcher });\n  //const { selectedOption } = activeRating;\n  const climbs = data && !error ? data.routes : [];\n\n  return (\n    <div>\n    <Map center={[40.65, -111.91]} zoom={12}>\n    <div className=\"filterMountains\">\n    <select id=\"lang\" onChange={this.change} value={this.state.value}>\n                  <option value=\"select\">Select</option>\n                  <option value=\"Java\">Java</option>\n                  <option value=\"C++\">C++</option>\n               </select>\n      {/* <Select options={ratings} value={activeRating} onChange={item => setActiveRating(item.label)}/> */}\n      </div>\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      />\n\n      {climbs.map(climb => (\n        <Marker\n          key={climb.id}\n          position={[climb.latitude, climb.longitude]}\n          onClick={() => {\n            setActiveClimb(climb);\n          }}\n          icon={icon}\n        />\n      ))}\n\n      {activeClimb && (\n        <Popup\n          position={[\n            activeClimb.latitude,\n            activeClimb.longitude\n          ]}\n          onClose={() => {\n            setActiveClimb(null);\n          }}\n        >\n          <div>\n            <h2>{activeClimb.name}</h2>\n            <p>{activeClimb.rating}</p>\n          </div>\n        </Popup>\n      )}\n    </Map>\n    </div>\n\n\n  );\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}