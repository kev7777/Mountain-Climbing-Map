{"ast":null,"code":"var _jsxFileName = \"/Users/kevinsmith/Source/map/src/App.js\";\nimport React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport Select from 'react-select';\nimport \"./App.css\";\nimport useSwr from \"swr\";\n\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\n\nconst StarRatings = [{\n  label: \"All routes\",\n  value: 0\n}, {\n  label: \"1+ of 4 stars\",\n  value: 1\n}, {\n  label: \"2+ of 4 stars\",\n  value: 2\n}, {\n  label: \"3+ of 4 stars\",\n  value: 3\n}, {\n  label: \"4 of 4 stars\",\n  value: 4\n}];\nconst Types = [{\n  label: \"All types\",\n  value: ''\n}, {\n  label: \"Trad\",\n  value: 'Trad'\n}, {\n  label: \"Sport\",\n  value: 'Sport'\n}, {\n  label: \"Toprope\",\n  value: 'TR'\n}];\nexport const icon = new Icon({\n  iconUrl: \"/mountain.svg\",\n  iconSize: [25, 25]\n});\nconst url = 'https://www.mountainproject.com/data/get-routes-for-lat-lon?lat=40.65&lon=-111.91&maxDistance=10&minDiff=4.0&maxDiff=5.9&key=200703063-2c86cd159070d7b2b2f9abc830c4f44b';\nconst {\n  data,\n  error\n} = useSwr(url, {\n  fetcher\n});\nconst climbs = data && !error ? data.routes : [];\n\nconst App = () => {\n  console.log(climbs);\n  const [filterClimbs, setFilterClimbs] = React.useState(climbs);\n  console.log(filterClimbs);\n  const [activeClimb, setActiveClimb] = React.useState(null);\n  const [stars, setStars] = React.useState(0);\n  const [type, setType] = React.useState(null);\n\n  const onChangeStars = e => {\n    //const newClimbs = climbs.filter(x => Math.round(x.stars) === e.value && x.rating >= minDiff && x.rating >= maxDiff)\n    const newClimbs = climbs.filter(x => x.stars >= e.value\n    /*&& type in x.type*/\n    );\n    setFilterClimbs(newClimbs);\n    console.log(e.label, e.value);\n    setStars(e);\n  };\n\n  const onChangeType = e => {\n    const newClimbs = climbs.filter(x => e.value in x.type);\n    setFilterClimbs(newClimbs);\n    console.log(e.label, e.value);\n    setType(e);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"filterMountains\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Select, {\n    options: StarRatings,\n    value: stars,\n    onChange: onChangeStars,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), React.createElement(Map, {\n    center: [40.65, -111.91],\n    zoom: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(TileLayer, {\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), filterClimbs.map(climb => React.createElement(Marker, {\n    key: climb.id,\n    position: [climb.latitude, climb.longitude],\n    onClick: () => {\n      setActiveClimb(climb);\n    },\n    icon: icon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), activeClimb && React.createElement(Popup, {\n    position: [activeClimb.latitude, activeClimb.longitude],\n    onClose: () => {\n      setActiveClimb(null);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, activeClimb.name), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, activeClimb.rating)))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/kevinsmith/Source/map/src/App.js"],"names":["React","Map","Marker","Popup","TileLayer","Icon","Select","useSwr","fetcher","args","fetch","then","response","json","StarRatings","label","value","Types","icon","iconUrl","iconSize","url","data","error","climbs","routes","App","console","log","filterClimbs","setFilterClimbs","useState","activeClimb","setActiveClimb","stars","setStars","type","setType","onChangeStars","e","newClimbs","filter","x","onChangeType","map","climb","id","latitude","longitude","name","rating"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport Select from 'react-select'\nimport \"./App.css\";\nimport useSwr from \"swr\";\n\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\nconst StarRatings = [\n  { label: \"All routes\", value: 0 },\n  { label: \"1+ of 4 stars\", value: 1 },\n  { label: \"2+ of 4 stars\", value: 2 },\n  { label: \"3+ of 4 stars\", value: 3 },\n  { label: \"4 of 4 stars\", value: 4 }\n];\nconst Types = [\n  { label: \"All types\", value: '' },\n  { label: \"Trad\", value: 'Trad' },\n  { label: \"Sport\", value: 'Sport' },\n  { label: \"Toprope\", value: 'TR' }\n];\nexport const icon = new Icon({\n  iconUrl: \"/mountain.svg\",\n  iconSize: [25, 25]\n});\nconst url = 'https://www.mountainproject.com/data/get-routes-for-lat-lon?lat=40.65&lon=-111.91&maxDistance=10&minDiff=4.0&maxDiff=5.9&key=200703063-2c86cd159070d7b2b2f9abc830c4f44b';\nconst { data, error } = useSwr(url, { fetcher });\nconst climbs = data && !error ? data.routes : [];\n\nconst App = () => {\n  console.log(climbs);\n  const [filterClimbs, setFilterClimbs] = React.useState(climbs);\n  console.log(filterClimbs);\n  const [activeClimb, setActiveClimb] = React.useState(null);\n  const [stars, setStars] = React.useState(0);\n  const [type, setType] = React.useState(null);\n\n  const onChangeStars = (e) => {\n    //const newClimbs = climbs.filter(x => Math.round(x.stars) === e.value && x.rating >= minDiff && x.rating >= maxDiff)\n    const newClimbs = climbs.filter(x => x.stars >= e.value /*&& type in x.type*/)\n    setFilterClimbs(newClimbs)\n    console.log(e.label, e.value)\n    setStars(e);\n  };\n  const onChangeType = (e) => {\n    const newClimbs = climbs.filter(x => e.value in x.type)\n    setFilterClimbs(newClimbs)\n    console.log(e.label, e.value)\n    setType(e);\n  };\n  return (\n    <div>\n      <div className=\"filterMountains\">\n        <Select options={StarRatings} value={stars} onChange={onChangeStars}/>\n        {/* <Select options={Types} value={type} onChange={onChangeType}/> */}\n\n      </div>\n      <Map center={[40.65, -111.91]} zoom={12}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {filterClimbs.map(climb => (\n          <Marker\n            key={climb.id}\n            position={[climb.latitude, climb.longitude]}\n            onClick={() => {\n              setActiveClimb(climb);\n            }}\n            icon={icon}\n          />\n        ))}\n\n        {activeClimb && (\n          <Popup\n            position={[\n              activeClimb.latitude,\n              activeClimb.longitude\n            ]}\n            onClose={() => {\n              setActiveClimb(null);\n            }}\n          >\n            <div>\n              <h2>{activeClimb.name}</h2>\n              <p>{activeClimb.rating}</p>\n            </div>\n          </Popup>\n        )}\n      </Map>\n    </div>\n  );\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}